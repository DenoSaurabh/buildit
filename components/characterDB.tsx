/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { MeshProps } from '@react-three/fiber'
import PlayerName from './canvas/playerName'
import { motion } from 'framer-motion/three'

// import { SkeletonUtils } from 'three/examples/jsm/utils/SkeletonUtils'

// import useCharacter from '@/store/character'

export default function CharacterBot({
  position,
  canMove,
  moveForward,
  mouseDegree,
  name,
  ...props
}) {
  const chracRef = useRef<MeshProps>()
  // const charGeoRef = useRef<THREE.Mesh>()
  // useBVH(charGeoRef)
  // useHelper(charGeoRef, MeshBVHVisualizer)

  // const mouseDegRef = useRef<number>(0)

  const { nodes } = useGLTF('models/player.glb')

  // const { scene } = useGLTF('models/player.glb')
  // const { nodes } = obj.clone()
  // const geo = nodes.Cube.geometry
  // const mat = nodes.Cube.material
  // const clone = useMemo(() => SkeletonUtils.clone(scene), [scene])
  // const { nodes } = useGraph(clone)

  // useEffect(() => {
  //   if (!chracRef.current) return

  //   chracRef.current.rotation.set(0, mouseDegree, 0)

  //   if (moveForward && canMove) {
  //     chracRef.current.translateZ(-0.15)
  //   }
  // }, [canMove, moveForward, mouseDegree])

  // useEffect(() => {
  //   chracRef.current.rotation.set(0, mouseDegree, 0) // -1
  // }, [, mouseDegree])

  return (
    <>
      <group
        ref={chracRef}
        name='character-db'
        // userData={{ id: 'character-db' }}
        dispose={null}
        scale={0.3}
        position={position}
        rotation={[0, mouseDegree, 0]}
        {...props}
      >
        <group
          position={[0, 16.37, 0]}
          name='char-bot'
          // {...props}
          userData={props.userData}
        >
          <PlayerName defaultName={name} />

          <mesh
            name='char-bot'
            geometry={nodes.Cube.geometry}
            material={nodes.Cube.material}
            // position={[-13.66, 15.26, -0.08]}
            position={[5, 0, 0]}
            scale={[1.54, 5.57, 1.93]}
            userData={props.userData}
            // {...props}
          />
        </group>
      </group>
    </>
  )
}
