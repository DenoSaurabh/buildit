/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

// import * as THREE from 'three'
// import React, { useRef } from 'react'
// import { useGLTF } from '@react-three/drei'
// import { GLTF } from 'three/examples/jsm/loaders/GLTFLoader'

// import { ethers } from 'ethers'
// import { useEffect, useState } from 'react'
// import axios from 'axios'
// import Web3Modal from 'web3modal'

// import { nftMarketAddress, nftAddress } from '@/nftConfig'

// import NFT from '@/artifacts/contracts/NFT.sol/NFT.json'
// import Market from '@/artifacts/contracts/NFTMarket.sol/NFTMarket.json'

// import NFTComp from '@/components/nft'

// type GLTFResult = GLTF & {
//   nodes: {
//     ['world_export-9']: THREE.Mesh
//   }
//   materials: {
//     ['world_export-9 #1']: THREE.MeshStandardMaterial
//   }
// }

// export default function UserBottomLeft(props: JSX.IntrinsicElements['group']) {
//   const group = useRef<THREE.Group>()
//   const { nodes, materials } = useGLTF(
//     'models/world/user/user_bottom_left.glb'
//   ) as GLTFResult

//   const [nfts, setNfts] = useState([])
//   const [loadingState, setLoadingState] = useState('not-loaded')

//   useEffect(() => {
//     loadNFTs()
//   }, [])

//   async function loadNFTs() {
//     const web3Modal = new Web3Modal()
//     const connection = await web3Modal.connect()
//     const provider = new ethers.providers.Web3Provider(connection)
//     const signer = provider.getSigner()

//     const marketContract = new ethers.Contract(
//       nftMarketAddress,
//       Market.abi,
//       signer
//     )
//     const tokenContract = new ethers.Contract(nftAddress, NFT.abi, provider)
//     const data = await marketContract.fetchMyNFTs()

//     const items = await Promise.all(
//       data.map(async (i) => {
//         const tokenUri = await tokenContract.tokenURI(i.tokenId)
//         const meta = await axios.get(tokenUri)
//         let price = ethers.utils.formatUnits(i.price.toString(), 'ether')
//         let item = {
//           price,
//           tokenId: i.tokenId.toNumber(),
//           seller: i.seller,
//           owner: i.owner,
//           image: meta.data.image,
//         }
//         return item
//       })
//     )

//     console.log('bought items', items)

//     setNfts(items)
//     setLoadingState('loaded')
//   }

//   const nftPositions = [
//     [80, -62, 270],
//     [60, -62, 270],
//     [40, -62, 270],
//     [80, -62, 320],
//     [60, -62, 320],
//     [40, -62, 320],
//     [80, -62, 220],
//     [60, -62, 220],
//     [40, -62, 220],
//   ]

//   return (
//     <group ref={group} {...props} dispose={null}>
//       <mesh
//         geometry={nodes['world_export-9'].geometry}
//         material={materials['world_export-9 #1']}
//         position={[58.53, 0, 246.09]}
//         rotation={[-Math.PI, 0, -Math.PI]}
//       />

//       {loadingState === 'loaded' && nfts
//         ? nfts.map((el, i) => {
//             return (
//               <NFTComp
//                 position={nftPositions[i]}
//                 key={i}
//                 {...el}
//                 onClick={() => {
//                   console.log('clicked', el)
//                 }}
//               />
//             )
//           })
//         : null}

//       {/* <mesh position={[80, -62, 270]} scale={[6, 6, 6]}>
//         <boxGeometry args={[1, 1, 1]} />
//         <meshStandardMaterial color={'hotpink'} />
//       </mesh>
//       <mesh position={[60, -62, 270]} scale={[6, 6, 6]}>
//         <boxGeometry args={[1, 1, 1]} />
//         <meshStandardMaterial color={'hotpink'} />
//       </mesh>
//       <mesh position={[40, -62, 270]} scale={[6, 6, 6]}>
//         <boxGeometry args={[1, 1, 1]} />
//         <meshStandardMaterial color={'hotpink'} />
//       </mesh>
//       <mesh position={[80, -62, 320]} scale={[6, 6, 6]}>
//         <boxGeometry args={[1, 1, 1]} />
//         <meshStandardMaterial color={'hotpink'} />
//       </mesh>
//       <mesh position={[60, -62, 320]} scale={[6, 6, 6]}>
//         <boxGeometry args={[1, 1, 1]} />
//         <meshStandardMaterial color={'hotpink'} />
//       </mesh>
//       <mesh position={[40, -62, 320]} scale={[6, 6, 6]}>
//         <boxGeometry args={[1, 1, 1]} />
//         <meshStandardMaterial color={'hotpink'} />
//       </mesh>
//       <mesh position={[80, -62, 220]} scale={[6, 6, 6]}>
//         <boxGeometry args={[1, 1, 1]} />
//         <meshStandardMaterial color={'hotpink'} />
//       </mesh>
//       <mesh position={[60, -62, 220]} scale={[6, 6, 6]}>
//         <boxGeometry args={[1, 1, 1]} />
//         <meshStandardMaterial color={'hotpink'} />
//       </mesh>
//       <mesh position={[40, -62, 220]} scale={[6, 6, 6]}>
//         <boxGeometry args={[1, 1, 1]} />
//         <meshStandardMaterial color={'hotpink'} />
//       </mesh> */}
//     </group>
//   )
// }

// useGLTF.preload('models/world/user/user_bottom_left.glb')

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three/examples/jsm/loaders/GLTFLoader'

type GLTFResult = GLTF & {
  nodes: {
    ['user_voxel-bottom-1']: THREE.Mesh
    ['user_voxel-bottom-1_1']: THREE.Mesh
  }
  materials: {
    ['user_voxel-bottom-1 #249']: THREE.MeshBasicMaterial
    ['user_voxel-bottom-1 #242']: THREE.MeshBasicMaterial
  }
}

export default function Model(props: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>()
  const { nodes, materials } = useGLTF(
    'models/world/user/user_bottom_enter.glb'
  ) as GLTFResult
  return (
    <group
      ref={group}
      {...props}
      dispose={null}
      position={[58.53, 0, 246.09]}
      rotation={[-Math.PI, 0, -Math.PI]}
    >
      <group>
        <mesh
          geometry={nodes['user_voxel-bottom-1'].geometry}
          material={materials['user_voxel-bottom-1 #249']}
        />
        <mesh
          geometry={nodes['user_voxel-bottom-1_1'].geometry}
          material={materials['user_voxel-bottom-1 #242']}
        />
      </group>
    </group>
  )
}

useGLTF.preload('models/world/user/user_bottom_enter.glb')
