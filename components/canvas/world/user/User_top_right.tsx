/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

// import * as THREE from 'three'
// import React, { useRef } from 'react'
// import { useGLTF } from '@react-three/drei'
// import { GLTF } from 'three/examples/jsm/loaders/GLTFLoader'

// type GLTFResult = GLTF & {
//   nodes: {
//     ['world_export-12_1']: THREE.Mesh
//     ['world_export-12_2']: THREE.Mesh
//   }
//   materials: {
//     ['world_export-12 #1']: THREE.MeshStandardMaterial
//     ['world_export-12 #254']: THREE.MeshStandardMaterial
//   }
// }

// export default function UserTopRight(props: JSX.IntrinsicElements['group']) {
//   const group = useRef<THREE.Group>()
//   const { nodes, materials } = useGLTF('models/world/user/user_top_right.glb') as GLTFResult
//   return (
//     <group ref={group} {...props} dispose={null}>
//       <group >
//         <mesh geometry={nodes['world_export-12_1'].geometry} material={materials['world_export-12 #1']} />
//         <mesh geometry={nodes['world_export-12_2'].geometry} material={materials['world_export-12 #254']} />
//       </group>
//     </group>
//   )
// }

// useGLTF.preload('models/world/user/user_top_right.glb')

// /*
// Auto-generated by: https://github.com/pmndrs/gltfjsx
// */

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three/examples/jsm/loaders/GLTFLoader'
import PortalBox from '@/components/portalBox'
import { useThree } from '@react-three/fiber'
import BillBoard from '@/components/billboard'
import useLoad from '@/store/load'

type GLTFResult = GLTF & {
  nodes: {
    bridge_portal_1: THREE.Mesh
    bridge_portal_2: THREE.Mesh
    bridge_portal_3: THREE.Mesh
  }
  materials: {
    ['bridge_portal #249']: THREE.MeshBasicMaterial
    ['bridge_portal #250']: THREE.MeshBasicMaterial
    ['bridge_portal #242']: THREE.MeshBasicMaterial
  }
}

export default function UserPortal(props: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>()
  const { nodes, materials } = useGLTF(
    'models/world/user/user_portal.glb'
  ) as GLTFResult

  const { scene } = useThree()

  const onPortalClick = () => {
    scene.getObjectByName('character').position.set(-110, -75, 238)
  }

  const load = useLoad(({ chunkData }) => chunkData('user-bridge-portal').load)
  if (!load) return null

  return (
    <group
      ref={group}
      {...props}
      dispose={null}
      position={[-97, 0, 401]}
      rotation={[-Math.PI, 0, -Math.PI]}
      name='user-bridge-portal'
    >
      <mesh
        geometry={nodes.bridge_portal_1.geometry}
        material={materials['bridge_portal #249']}
        name='user-bridge-portal'
      />
      <mesh
        geometry={nodes.bridge_portal_2.geometry}
        material={materials['bridge_portal #250']}
        name='user-bridge-portal'
      />
      <mesh
        geometry={nodes.bridge_portal_3.geometry}
        material={materials['bridge_portal #242']}
        name='user-bridge-portal'
      />

      <PortalBox
        scale={[2, 20, 20]}
        position={[70, 0, -16]}
        onClickHandler={onPortalClick}
      />
      <BillBoard position={[70, 0, -16]}>Return Back</BillBoard>
    </group>
  )
}

useGLTF.preload('models/world/user/user_portal.glb')
