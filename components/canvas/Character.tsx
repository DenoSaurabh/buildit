/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useState, useRef, useEffect } from 'react'
import * as THREE from 'three'
import { useAnimations, useBVH, useGLTF, useHelper } from '@react-three/drei'
import { MeshProps, RaycasterProps, useFrame } from '@react-three/fiber'
import { GLTF } from 'three-stdlib'
import useCharacter from '@/store/character'
import detectLeftButtonBtn from '@/utils/detectLeftMouseBtn'

import {
  computeBoundsTree,
  disposeBoundsTree,
  acceleratedRaycast,
  MeshBVHVisualizer,
} from 'three-mesh-bvh'

// Add the extension functions
THREE.BufferGeometry.prototype.computeBoundsTree = computeBoundsTree
THREE.BufferGeometry.prototype.disposeBoundsTree = disposeBoundsTree
THREE.Mesh.prototype.raycast = acceleratedRaycast

// type GLTFResult = GLTF & {
//   nodes: {
//     character_1: THREE.Mesh
//     character_2: THREE.Mesh
//   }
//   materials: {
//     ['character #60']: THREE.MeshBasicMaterial
//     ['character #73']: THREE.MeshBasicMaterial
//   }
// }

type GLTFResult = GLTF & {
  nodes: {
    ['character_3_export-0']: THREE.Mesh
    ['character_3_export-0_1']: THREE.Mesh
    ['character_3_export-0_2']: THREE.Mesh
    ['character_3_export-0_3']: THREE.Mesh
    ['character_3_export-1']: THREE.Mesh
    ['character_3_export-1_1']: THREE.Mesh
    ['character_3_export-1_2']: THREE.Mesh
    ['character_3_export-1_3']: THREE.Mesh
    ['character_3_export-1_4']: THREE.Mesh
    ['character_3_export-1_5']: THREE.Mesh
    ['character_3_export-5']: THREE.Mesh
    ['character_3_export-5_1']: THREE.Mesh
    ['character_3_export-3']: THREE.Mesh
    ['character_3_export-3_1']: THREE.Mesh
    ['character_3_export-3_2']: THREE.Mesh
    ['character_3_export-4']: THREE.Mesh
    ['character_3_export-4_1']: THREE.Mesh
    ['character_3_export-2']: THREE.Mesh
    ['character_3_export-2_1']: THREE.Mesh
    ['character_3_export-2_2']: THREE.Mesh
  }
  materials: {
    ['character_3_export-0 #220']: THREE.MeshStandardMaterial
    ['character_3_export-0 #229']: THREE.MeshStandardMaterial
    ['character_3_export-0 #225']: THREE.MeshStandardMaterial
    ['character_3_export-0 #228']: THREE.MeshStandardMaterial
    ['character_3_export-1 #229']: THREE.MeshStandardMaterial
    ['character_3_export-1 #231']: THREE.MeshStandardMaterial
    ['character_3_export-1 #219']: THREE.MeshStandardMaterial
    ['character_3_export-1 #232']: THREE.MeshStandardMaterial
    ['character_3_export-1 #221']: THREE.MeshStandardMaterial
    ['character_3_export-1 #220']: THREE.MeshStandardMaterial
    ['character_3_export-5 #229']: THREE.MeshStandardMaterial
    ['character_3_export-5 #217']: THREE.MeshStandardMaterial
    ['character_3_export-3 #217']: THREE.MeshStandardMaterial
    ['character_3_export-3 #229']: THREE.MeshStandardMaterial
    ['character_3_export-3 #219']: THREE.MeshStandardMaterial
    ['character_3_export-4 #229']: THREE.MeshStandardMaterial
    ['character_3_export-4 #217']: THREE.MeshStandardMaterial
    ['character_3_export-2 #217']: THREE.MeshStandardMaterial
    ['character_3_export-2 #229']: THREE.MeshStandardMaterial
    ['character_3_export-2 #219']: THREE.MeshStandardMaterial
  }
}

type ActionName =
  | 'headAction'
  | 'bodyAction'
  | 'right_legAction'
  | 'left_legAction'
  | 'right_handAction'
  | 'left_handAction'
type GLTFActions = Record<ActionName, THREE.AnimationAction>

export default function Character({ ...props }) {
  const chracRef = useRef<MeshProps>()
  const charGeoRef = useRef<THREE.Mesh>()
  // useBVH(charGeoRef)
  // useHelper(charGeoRef, MeshBVHVisualizer)

  const aheadRaycastRef = useRef<RaycasterProps>()
  const downRaycastRef = useRef<RaycasterProps>()

  const mouseDegRef = useRef<number>(0)

  const { nodes, materials, animations } = useGLTF(
    'models/character-3-with-ani.glb'
  ) as GLTFResult
  const { actions, mixer, clips, names } = useAnimations<GLTFActions>(
    animations,
    chracRef
  )
  console.log({ mixer, clips, names })

  // console.log(actions)
  // if (actions['Spot.001Action']) {
  //   actions['Spot.001Action'].play()
  //   actions['right-handAction'].play()
  //   actions['left-handAction'].play()
  //   actions['left-legAction'].play()
  //   actions['right-legAction'].play()
  //   actions['headAction'].play()
  //   actions['bodyAction'].play()
  // }

  // if (actions['headAction']) {
  // console.log(actions)

  // actions['headAction'].play()
  // actions['bodyAction'].play()
  // actions['right_legAction'].play()
  // actions['left_legAction'].play()
  // actions['right_handAction'].play()
  // actions['left_handAction'].play()
  // }

  useEffect(() => {
    console.log(actions)
    actions['headAction']?.play()
    actions['bodyAction']?.play()
    actions['right_legAction']?.play()
    actions['left_legAction']?.play()
    actions['right_handAction']?.play()
    actions['left_handAction']?.play()
  })

  useFrame(({ scene, camera, mouse, get }) => {
    const { x, y } = mouse
    const mouseDegree = Math.atan2(y, x)
    // mouseDegRef.current = mouseDegree

    const { canMove, moveForward, setMouseDegree } = useCharacter.getState()

    const objs = scene.getObjectByName('world')?.children

    if (chracRef.current) {
      chracRef.current.rotation.set(0, mouseDegree + 1, 0) // -1

      let collidesData = []

      if (aheadRaycastRef.current && objs) {
        const intersectsAhead = aheadRaycastRef.current.intersectObjects(
          objs,
          true
        )

        if (intersectsAhead.length) {
          const closestBase = intersectsAhead.reduce((fir, sec) => {
            return fir.distance < sec.distance ? fir : sec
          }, [])

          if (closestBase.distance < 1) {
            collidesData = [...collidesData, 'ahead']
          } else {
            const removedCollides = collidesData.filter((el) => el !== 'left')
            collidesData = removedCollides
          }
        }
      }

      if (moveForward && canMove) {
        if (collidesData.length > 0) return

        // setMouseDegree(mouseDegree)
        chracRef.current.translateZ(-0.13) //-0.15
      }

      const charNewPos = {
        x: 50 + chracRef.current.position.x,
        y: 50 + chracRef.current.position.y,
        z: -50 + chracRef.current.position.z,
      }

      // THREE.MathUtils.lerp(camera.position, 100, 0.1)
      camera.position.set(charNewPos.x, charNewPos.y, charNewPos.z)
    }

    if (downRaycastRef.current && objs) {
      const intersectsDown = downRaycastRef.current.intersectObjects(objs, true)

      if (intersectsDown.length) {
        const closestBase = intersectsDown.reduce((fir, sec) => {
          return fir.distance < sec.distance ? fir : sec
        })

        chracRef.current.position.y -= closestBase.distance - 3.5
      }
    }
  })

  const onMouseDown = (e) => {
    detectLeftButtonBtn(e) && useCharacter.getState().setMoveForward(true)
  }

  const onMouseUp = (e) => {
    useCharacter.getState().setMoveForward(false)
  }

  useEffect(() => {
    window.addEventListener('mousedown', onMouseDown)
    window.addEventListener('mouseup', onMouseUp)

    return () => {
      window.removeEventListener('mousedown', onMouseDown)
      window.removeEventListener('mouseup', onMouseUp)
    }
  }, [])

  return (
    <>
      <group
        ref={chracRef}
        {...props}
        name='character'
        userData={{ id: 'character' }}
        dispose={null}
        scale={0.3}
      >
        <group position={[0, 16.37, 0]}>
          <mesh
            geometry={nodes['character_3_export-0'].geometry}
            material={materials['character_3_export-0 #220']}
          />
          <mesh
            geometry={nodes['character_3_export-0_1'].geometry}
            material={materials['character_3_export-0 #229']}
          />
          <mesh
            geometry={nodes['character_3_export-0_2'].geometry}
            material={materials['character_3_export-0 #225']}
          />
          <mesh
            geometry={nodes['character_3_export-0_3'].geometry}
            material={materials['character_3_export-0 #228']}
          />
          <group position={[0, 10, 0]}>
            <mesh
              geometry={nodes['character_3_export-1'].geometry}
              material={materials['character_3_export-1 #229']}
            />
            <mesh
              geometry={nodes['character_3_export-1_1'].geometry}
              material={materials['character_3_export-1 #231']}
            />
            <mesh
              geometry={nodes['character_3_export-1_2'].geometry}
              material={materials['character_3_export-1 #219']}
            />
            <mesh
              geometry={nodes['character_3_export-1_3'].geometry}
              material={materials['character_3_export-1 #232']}
            />
            <mesh
              geometry={nodes['character_3_export-1_4'].geometry}
              material={materials['character_3_export-1 #221']}
            />
            <mesh
              geometry={nodes['character_3_export-1_5'].geometry}
              material={materials['character_3_export-1 #220']}
            />
          </group>
          <group position={[5.5, 4.92, 0.01]}>
            <mesh
              geometry={nodes['character_3_export-5'].geometry}
              material={materials['character_3_export-5 #229']}
            />
            <mesh
              geometry={nodes['character_3_export-5_1'].geometry}
              material={materials['character_3_export-5 #217']}
            />
          </group>
          <group position={[1.98, -6.04, 0]}>
            <mesh
              geometry={nodes['character_3_export-3'].geometry}
              material={materials['character_3_export-3 #217']}
            />
            <mesh
              geometry={nodes['character_3_export-3_1'].geometry}
              material={materials['character_3_export-3 #229']}
            />
            <mesh
              geometry={nodes['character_3_export-3_2'].geometry}
              material={materials['character_3_export-3 #219']}
            />
          </group>
          <group position={[-5.5, 4.99, 0.1]}>
            <mesh
              geometry={nodes['character_3_export-4'].geometry}
              material={materials['character_3_export-4 #229']}
            />
            <mesh
              geometry={nodes['character_3_export-4_1'].geometry}
              material={materials['character_3_export-4 #217']}
            />
          </group>
          <group position={[-2.03, -6.06, 0]}>
            <mesh
              geometry={nodes['character_3_export-2'].geometry}
              material={materials['character_3_export-2 #217']}
            />
            <mesh
              geometry={nodes['character_3_export-2_1'].geometry}
              material={materials['character_3_export-2 #229']}
            />
            <mesh
              geometry={nodes['character_3_export-2_2'].geometry}
              material={materials['character_3_export-2 #219']}
            />
          </group>
        </group>
      </group>
      {/* <group
        name='character'
        ref={chracRef}
        {...props}
        dispose={null}
        userData={{ id: 'character' }}
        position={[0, 10, 0]}
      >
        <group scale={0.9}>
          <mesh
            ref={charGeoRef}
            geometry={nodes.character_1.geometry}
            material={materials['character #60']}
            userData={{ id: 'character_model' }}
          />
          <mesh
            geometry={nodes.character_2.geometry}
            material={materials['character #73']}
            userData={{ id: 'character_model' }}
          />
        </group>
      </group> */}

      {chracRef.current && (
        <group>
          <arrowHelper
            args={[
              new THREE.Vector3(1, 0, 0)
                .applyAxisAngle(
                  new THREE.Vector3(0, 1, 0),
                  mouseDegRef.current - 4.2
                )
                .normalize(),
              chracRef.current.getWorldPosition(chracRef.current.position),
              100,
              0xffff00,
            ]}
          />
          <raycaster
            args={[
              chracRef.current.getWorldPosition(chracRef.current.position),
              new THREE.Vector3(1, 0, 0)
                .applyAxisAngle(
                  new THREE.Vector3(0, 1, 0),
                  mouseDegRef.current - 4.2
                )
                .normalize(),
            ]}
            ref={aheadRaycastRef}
            id='character-ahead-ray'
            userData={{ id: 'character-ahead-ray' }}
          />

          <raycaster
            args={[
              chracRef.current.getWorldPosition(chracRef.current.position),
              new THREE.Vector3(0, -100, 0).normalize(),
            ]}
            ref={downRaycastRef}
            id='character-down-ray'
            userData={{ id: 'character-down-ray' }}
          />
        </group>
      )}
    </>
  )
}

// useGLTF.preload('/character.glb')
