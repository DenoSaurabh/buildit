/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useState, useRef, useEffect } from 'react'
import * as THREE from 'three'
import {
  Html,
  useAnimations,
  useBVH,
  useGLTF,
  useHelper,
} from '@react-three/drei'
import {
  MeshProps,
  RaycasterProps,
  useFrame,
  useThree,
} from '@react-three/fiber'
import { GLTF } from 'three-stdlib'
import useCharacter from '@/store/character'
import detectLeftButtonBtn from '@/utils/detectLeftMouseBtn'

// import {
//   computeBoundsTree,
//   disposeBoundsTree,
//   acceleratedRaycast,
//   MeshBVHVisualizer,
// } from 'three-mesh-bvh'
import CollisionSystem from './collisionSystem'
import { styled } from '@/stitches.config'
import { chunkIndex, chunksData } from '@/utils/chunksLoad'
import respawnEvent from '@/events/respawn'
import { useRouter } from 'next/router'
import PlayerName from './playerName'

// Add the extension functions
// THREE.BufferGeometry.prototype.computeBoundsTree = computeBoundsTree
// THREE.BufferGeometry.prototype.disposeBoundsTree = disposeBoundsTree
// THREE.Mesh.prototype.raycast = acceleratedRaycast

// type GLTFResult = GLTF & {
//   nodes: {
//     character_1: THREE.Mesh
//     character_2: THREE.Mesh
//   }
//   materials: {
//     ['character #60']: THREE.MeshBasicMaterial
//     ['character #73']: THREE.MeshBasicMaterial
//   }
// }

type GLTFResult = GLTF & {
  nodes: {
    ['character_3_export-0']: THREE.Mesh
    ['character_3_export-0_1']: THREE.Mesh
    ['character_3_export-0_2']: THREE.Mesh
    ['character_3_export-0_3']: THREE.Mesh
    ['character_3_export-1']: THREE.Mesh
    ['character_3_export-1_1']: THREE.Mesh
    ['character_3_export-1_2']: THREE.Mesh
    ['character_3_export-1_3']: THREE.Mesh
    ['character_3_export-1_4']: THREE.Mesh
    ['character_3_export-1_5']: THREE.Mesh
    ['character_3_export-5']: THREE.Mesh
    ['character_3_export-5_1']: THREE.Mesh
    ['character_3_export-3']: THREE.Mesh
    ['character_3_export-3_1']: THREE.Mesh
    ['character_3_export-3_2']: THREE.Mesh
    ['character_3_export-4']: THREE.Mesh
    ['character_3_export-4_1']: THREE.Mesh
    ['character_3_export-2']: THREE.Mesh
    ['character_3_export-2_1']: THREE.Mesh
    ['character_3_export-2_2']: THREE.Mesh
  }
  materials: {
    ['character_3_export-0 #220']: THREE.MeshStandardMaterial
    ['character_3_export-0 #229']: THREE.MeshStandardMaterial
    ['character_3_export-0 #225']: THREE.MeshStandardMaterial
    ['character_3_export-0 #228']: THREE.MeshStandardMaterial
    ['character_3_export-1 #229']: THREE.MeshStandardMaterial
    ['character_3_export-1 #231']: THREE.MeshStandardMaterial
    ['character_3_export-1 #219']: THREE.MeshStandardMaterial
    ['character_3_export-1 #232']: THREE.MeshStandardMaterial
    ['character_3_export-1 #221']: THREE.MeshStandardMaterial
    ['character_3_export-1 #220']: THREE.MeshStandardMaterial
    ['character_3_export-5 #229']: THREE.MeshStandardMaterial
    ['character_3_export-5 #217']: THREE.MeshStandardMaterial
    ['character_3_export-3 #217']: THREE.MeshStandardMaterial
    ['character_3_export-3 #229']: THREE.MeshStandardMaterial
    ['character_3_export-3 #219']: THREE.MeshStandardMaterial
    ['character_3_export-4 #229']: THREE.MeshStandardMaterial
    ['character_3_export-4 #217']: THREE.MeshStandardMaterial
    ['character_3_export-2 #217']: THREE.MeshStandardMaterial
    ['character_3_export-2 #229']: THREE.MeshStandardMaterial
    ['character_3_export-2 #219']: THREE.MeshStandardMaterial
  }
}

type ActionName =
  | 'headAction'
  | 'bodyAction'
  | 'right_legAction'
  | 'left_legAction'
  | 'right_handAction'
  | 'left_handAction'
type GLTFActions = Record<ActionName, THREE.AnimationAction>

export default function Character({ position, ...props }) {
  const chracRef = useRef<MeshProps>()
  // const charGeoRef = useRef<THREE.Mesh>()
  // useBVH(charGeoRef)
  // useHelper(charGeoRef, MeshBVHVisualizer)

  // const mouseDegRef = useRef<number>(0)

  const { nodes, materials, animations } = useGLTF(
    'models/character-3-with-ani.glb'
  ) as GLTFResult
  // const { actions, mixer, clips, names } = useAnimations<GLTFActions>(
  //   animations,
  //   chracRef
  // )
  // console.log({ mixer, clips, names })

  // console.log(actions)
  // if (actions['Spot.001Action']) {
  //   actions['Spot.001Action'].play()
  //   actions['right-handAction'].play()
  //   actions['left-handAction'].play()
  //   actions['left-legAction'].play()
  //   actions['right-legAction'].play()
  //   actions['headAction'].play()
  //   actions['bodyAction'].play()
  // }

  // if (actions['headAction']) {
  // console.log(actions)

  // actions['headAction'].play()
  // actions['bodyAction'].play()
  // actions['right_legAction'].play()
  // actions['left_legAction'].play()
  // actions['right_handAction'].play()
  // actions['left_handAction'].play()
  // }

  // useEffect(() => {
  //   console.log(actions)
  //   actions['headAction']?.play()
  //   actions['bodyAction']?.play()
  //   actions['right_legAction']?.play()
  //   actions['left_legAction']?.play()
  //   actions['right_handAction']?.play()
  //   actions['left_handAction']?.play()
  // })

  // const { setDpr } = useThree()
  // setDpr(2)

  var lastCalledTime
  var counter = 0
  var fpsArray = []

  useFrame(
    ({ scene, camera, mouse, get, clock, performance, frameloop }, delta) => {
      var fps
      let avgFPS

      if (!lastCalledTime) {
        lastCalledTime = new Date().getTime()
        fps = 0
      }

      var delta = (new Date().getTime() - lastCalledTime) / 1000
      lastCalledTime = new Date().getTime()
      fps = Math.ceil(1 / delta)

      if (counter >= 60) {
        var sum = fpsArray.reduce(function (a, b) {
          return a + b
        })
        var average = Math.ceil(sum / fpsArray.length)
        // console.log(average)
        avgFPS = average
        counter = 0
      } else {
        if (fps !== Infinity) {
          fpsArray.push(fps)
        }

        counter++
      }

      // console.log(fps)

      const { x, y } = mouse
      const mouseDegree = Math.atan2(y, x)
      // mouseDegRef.current = mouseDegree

      // console.log(clock, (60 * 1000) / clock.elapsedTime)

      // console.log(frameloop.frame)
      // console.log(frameloop.delta)

      // console.log(delta)

      const { canMove, moveForward, currentChunk } = useCharacter.getState()
      const chunkI = chunkIndex(currentChunk)
      const chunk = chunksData[chunkI[0]][chunkI[1]]
      const { cameraOffset, mouseDegreeOffset } = chunk
        ? chunk
        : {
            cameraOffset: [50, 50, 50],
            mouseDegreeOffset: -0.7,
          }

      if (chracRef.current) {
        chracRef.current.rotation.set(0, mouseDegree + mouseDegreeOffset, 0) // -1

        // console.log(canMove)

        // console.log(chracRef.current.position)

        if (moveForward && canMove) {
          // if (collidesData.length > 0) return

          const counterFPS = 120 / fps

          // setMouseDegree(mouseDegree)
          chracRef.current.translateZ(-0.15 * counterFPS) //-0.15 --- -0.13

          const [x, y, z] = cameraOffset

          const charNewPos = {
            x: x + chracRef.current.position.x,
            y: y + chracRef.current.position.y,
            z: z + chracRef.current.position.z,
          }

          // camera.position.set(charNewPos.x, charNewPos.y, charNewPos.z)
          // THREE.MathUtils.lerp(charNewPos, 100, 0.1)
          camera.position.lerp(charNewPos, 0.06)
        }

        // console.log(chracRef.current.position.y)
      }
    }
  )

  const onMouseDown = (e) => {
    e.preventDefault()

    // console.log('mouse down')

    if (!useCharacter.getState().moveForward) {
      detectLeftButtonBtn(e) && useCharacter.getState().setMoveForward(true)
      // invalidate()
    }
  }

  const onMouseUp = (e) => {
    e.preventDefault()

    if (useCharacter.getState().moveForward) {
      useCharacter.getState().setMoveForward(false)
    }
  }

  useEffect(() => {
    console.log('character rerender')

    console.log(window)

    window.addEventListener('mousedown', onMouseDown)
    window.addEventListener('mouseup', onMouseUp)

    window.addEventListener('pointerdown', onMouseDown)
    window.addEventListener('pointerup', onMouseUp)

    // respawnEvent.addEventListener('start', () => {
    //   if (chracRef.current) {
    //     chracRef.current.position.set(240, 5, 70)
    //   }
    // })

    return () => {
      window.removeEventListener('mousedown', onMouseDown)
      window.removeEventListener('mouseup', onMouseUp)

      window.removeEventListener('pointerdown', onMouseDown)
      window.removeEventListener('pointerup', onMouseUp)

      // respawnEvent.removeEventListener('start', () => {
      //   if (chracRef.current) {
      //     chracRef.current.position.set(240, 5, 70)
      //   }
      // })
    }
  }, [])

  // const router = useRouter()

  // useEffect(() => {
  //   if (charGeoRef.current) {
  //     console.log(charGeoRef.current)

  //     charGeoRef.current.geometry.boundsTree.shapecast({
  //       intersectsBounds: (box) => {
  //         console.log(box)
  //       },
  //       intersectsTriangle: (tri) => {
  //         // check if the triangle is intersecting the capsule and adjust the
  //         // capsule position if it is.

  //         console.log(tri)

  //         // const triPoint = tempVector
  //         // const capsulePoint = tempVector2

  //         // const distance = tri.closestPointToSegment(
  //         //   tempSegment,
  //         //   triPoint,
  //         //   capsulePoint
  //         // )
  //         // if (distance < capsuleInfo.radius) {
  //         //   const depth = capsuleInfo.radius - distance
  //         //   const direction = capsulePoint.sub(triPoint).normalize()

  //         //   tempSegment.start.addScaledVector(direction, depth)
  //         //   tempSegment.end.addScaledVector(direction, depth)
  //         // }
  //       },
  //     })
  //   }
  // }, [, charGeoRef.current])

  return (
    <>
      <group
        ref={chracRef}
        {...props}
        name='character'
        userData={{ id: 'character' }}
        dispose={null}
        scale={0.3}
        position={position}
      >
        <PlayerName />
        <group position={[0, 16.37, 0]}>
          <mesh
            geometry={nodes['character_3_export-0'].geometry}
            material={materials['character_3_export-0 #220']}
          />
          <mesh
            geometry={nodes['character_3_export-0_1'].geometry}
            material={materials['character_3_export-0 #229']}
          />
          <mesh
            geometry={nodes['character_3_export-0_2'].geometry}
            material={materials['character_3_export-0 #225']}
          />
          <mesh
            geometry={nodes['character_3_export-0_3'].geometry}
            material={materials['character_3_export-0 #228']}
          />
          <group position={[0, 10, 0]}>
            <mesh
              geometry={nodes['character_3_export-1'].geometry}
              material={materials['character_3_export-1 #229']}
            />
            <mesh
              geometry={nodes['character_3_export-1_1'].geometry}
              material={materials['character_3_export-1 #231']}
            />
            <mesh
              geometry={nodes['character_3_export-1_2'].geometry}
              material={materials['character_3_export-1 #219']}
            />
            <mesh
              geometry={nodes['character_3_export-1_3'].geometry}
              material={materials['character_3_export-1 #232']}
            />
            <mesh
              geometry={nodes['character_3_export-1_4'].geometry}
              material={materials['character_3_export-1 #221']}
            />
            <mesh
              geometry={nodes['character_3_export-1_5'].geometry}
              material={materials['character_3_export-1 #220']}
            />
          </group>
          <group position={[5.5, 4.92, 0.01]}>
            <mesh
              geometry={nodes['character_3_export-5'].geometry}
              material={materials['character_3_export-5 #229']}
            />
            <mesh
              geometry={nodes['character_3_export-5_1'].geometry}
              material={materials['character_3_export-5 #217']}
            />
          </group>
          <group position={[1.98, -6.04, 0]}>
            <mesh
              geometry={nodes['character_3_export-3'].geometry}
              material={materials['character_3_export-3 #217']}
            />
            <mesh
              geometry={nodes['character_3_export-3_1'].geometry}
              material={materials['character_3_export-3 #229']}
            />
            <mesh
              geometry={nodes['character_3_export-3_2'].geometry}
              material={materials['character_3_export-3 #219']}
            />
          </group>
          <group position={[-5.5, 4.99, 0.1]}>
            <mesh
              geometry={nodes['character_3_export-4'].geometry}
              material={materials['character_3_export-4 #229']}
            />
            <mesh
              geometry={nodes['character_3_export-4_1'].geometry}
              material={materials['character_3_export-4 #217']}
            />
          </group>
          <group position={[-2.03, -6.06, 0]}>
            <mesh
              geometry={nodes['character_3_export-2'].geometry}
              material={materials['character_3_export-2 #217']}
            />
            <mesh
              geometry={nodes['character_3_export-2_1'].geometry}
              material={materials['character_3_export-2 #229']}
            />
            <mesh
              geometry={nodes['character_3_export-2_2'].geometry}
              material={materials['character_3_export-2 #219']}
            />
          </group>
        </group>
      </group>

      <CollisionSystem />
      {/* <group
        name='character'
        ref={chracRef}
        {...props}
        dispose={null}
        userData={{ id: 'character' }}
        position={[0, 10, 0]}
      >
        <group scale={0.9}>
          <mesh
            ref={charGeoRef}
            geometry={nodes.character_1.geometry}
            material={materials['character #60']}
            userData={{ id: 'character_model' }}
          />
          <mesh
            geometry={nodes.character_2.geometry}
            material={materials['character #73']}
            userData={{ id: 'character_model' }}
          />
        </group>
      </group> */}
    </>
  )
}

// useGLTF.preload('/character.glb')
